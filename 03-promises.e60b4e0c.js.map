{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GActC,OAZgB,IAAIC,SAAQ,CAACC,EAAKC,KAChCC,YAAW,KACLN,EAEFI,EAAI,C,SAAEN,E,MAAUC,IAGhBM,EAAI,C,SAAEP,E,MAAUC,GAAQ,GAEzBA,EAAM,G,CA5CAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAA2BC,GACzBA,EAAEC,iBAEF,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAEK,cAAcC,SAEhDnB,EAAc,EAAGoB,OAAOL,EAAMM,QAC3BC,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,EAAAzB,GAAS0B,OAAOC,QAAQ,uBAAqBxB,QAAiBC,MAAU,IAEzEwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,EAAAzB,GAAS0B,OAAOG,QAAQ,sBAAoB1B,QAAiBC,MAAU,IAG3E,IAAK,IAAI0B,EAAI,EAAGA,GAAKR,OAAOH,EAAOI,OAAQO,IACzC5B,EAAc4B,EAAGR,OAAOJ,EAAKK,QAAUO,EAAI,GAAIR,OAAOL,EAAMM,QACzDC,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,EAAAzB,GAAS0B,OAAOC,QACd,uBAAqBxB,QAAiBC,MAAU,IAGnDwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,EAAAzB,GAAS0B,OAAOG,QACd,sBAAoB1B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["// import debounce from 'lodash.debounce';\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', promisesGenerator);\n\nfunction promisesGenerator(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = e.currentTarget.elements;\n\n  createPromise(1, Number(delay.value))\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n  for (let i = 2; i <= Number(amount.value); i++) {\n    createPromise(i, Number(step.value) * (i - 1)+ Number(delay.value))\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((res, rej) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        res({ position, delay });\n      } else {\n        // Reject\n        rej({ position, delay });\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","step","amount","currentTarget","elements","Number","value","then","$parcel$interopDefault","Notify","success","catch","failure","i"],"version":3,"file":"03-promises.e60b4e0c.js.map"}